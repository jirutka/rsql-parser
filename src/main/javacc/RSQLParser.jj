/*
 * The MIT License
 *
 * Copyright 2013-2014 Jakub Jirutka <jakub@jirutka.cz>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

options {
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 3;
    OTHER_AMBIGUITY_CHECK = 2;
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    UNICODE_INPUT = true;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(Parser)

package cz.jirutka.rsql.parser;

import cz.jirutka.rsql.parser.ast.*;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

final class Parser {

    private NodesFactory factory;

    public Parser(InputStream stream, String encoding, NodesFactory factory) {
        this(stream, encoding);
        this.factory = factory;
    }
}

PARSER_END(Parser)


SKIP : {
    " " | "\t"
}

TOKEN : {
    < #ALPHA : ["a"-"z", "A"-"Z"] >
}

TOKEN : {
    < UNRESERVED_STR    : ( ~["\"", "'", "(", ")", ";", ",", "=", "<", ">", "!", "~", " "] )+ >
  | < SINGLE_QUOTED_STR : ( "'" ( "\\" ~[] | ~["'", "\\"] )* "'" ) > {
        matchedToken.image = image.substring(1, image.length() -1);
    }
  | < DOUBLE_QUOTED_STR : ( "\"" ( "\\" ~[] | ~["\"", "\\"] )* "\"" ) > {
        matchedToken.image = image.substring(1, image.length() -1);
    }
}

TOKEN : {
    < AND        : ( ";" | " and ") >
  | < OR         : ( "," | " or " ) >
  | < LPAREN     : "(" >
  | < RPAREN     : ")" >
  | < COMP_FIQL  : ( ( "=" (<ALPHA>)* ) | "!" ) "=" >
  | < COMP_ALT   : ( ">" | "<" ) ( "=" )? >
}


Node Input():
{
    final Node node;
}
{
    node = Or() <EOF>
    {
        return node;
    }
}

Node Or():
{
    final List<Node> nodes = new ArrayList<Node>(3);
    Node node;
}
{
    node = And() { nodes.add(node); }
    (
        <OR> node = And() { nodes.add(node); }
    )*
    {
        return nodes.size() != 1 ? factory.createLogicalNode(LogicalOperator.OR, nodes) : nodes.get(0);
    }
}

Node And():
{
    final List<Node> nodes = new ArrayList<Node>(3);
    Node node;
}
{
    node = Constraint() { nodes.add(node); }
    (
        <AND> node = Constraint() { nodes.add(node); }
    )*
    {
        return nodes.size() != 1 ? factory.createLogicalNode(LogicalOperator.AND, nodes) : nodes.get(0);
    }
}

Node Constraint():
{
    final Node node;
}
{
    ( node = Group() | node = Comparison() )
    {
        return node;
    }
}

Node Group():
{
    final Node node;
}
{
    <LPAREN> node = Or() <RPAREN>
    {
        return node;
    }
}

ComparisonNode Comparison():
{
    final String sel;
    final String op;
    final List<String> args;
}
{
    ( sel = Selector() op = Operator() args = Arguments() )
    {
        return factory.createComparisonNode(op, sel, args);
    }
}

String Selector(): {}
{
    token = <UNRESERVED_STR>
    {
        return token.image;
    }
}

String Operator(): {}
{
    ( token = <COMP_FIQL> | token = <COMP_ALT> )
    {
        return token.image;
    }
}

List<String> Arguments():
{
    final Object value;
}
{
    ( <LPAREN> value = CommaSepArguments() <RPAREN> ) { return (List) value; }
    |
    value = Argument() { return Arrays.asList((String) value); }
}

List<String> CommaSepArguments():
{
    final List<String> list = new ArrayList<String>(3);
    String arg;
}
{
    arg = Argument() { list.add(arg); }
    (
        <OR>
        arg = Argument() { list.add(arg); }
    )*
    {
        return list;
    }
}

String Argument(): {}
{
    ( token = <UNRESERVED_STR> | token = <DOUBLE_QUOTED_STR> | token = <SINGLE_QUOTED_STR> )
    {
        return token.image;
    }
}
